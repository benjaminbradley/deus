<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>{{ name }}</title>
    <link href="/stylesheets/bootstrap.min.css" rel="stylesheet">
    <link href="/stylesheets/bootstrap-responsive.min.css" rel="stylesheet">
    <link href="/stylesheets/style.css" rel="stylesheet">
    <link rel="stylesheet" href="/stylesheets/animations.css">
    <style>
      g.highcharts-legend-item {
        display: none;
      }
      g.highcharts-xaxis-labels {
        display: none;
      }
      body {
        background-image: url(/img/scroll.jpg);
        background-size: 100%;
        background-repeat: no-repeat;
      }
      .container {
        padding: 40px;
      }
      svg > text {
        display: none;
      }
    </style>
    <script>
      function startTimer() {
        $.post("/api/events/{{ id }}/timer/on", function() {
          console.log('here');
        });
        return false;
      }
    </script>
</head>
<body>
	<div class="container">
		<div><span class="{{ state }}">SMS or Call</span>
		<span class="phone {{ state }}"> {{ phonenumber }} </span>
		<span class="{{ state }}"> to Vote!</span></div>
		<h2 class="{{ state }} countdown"></h2>
                <div style="min-width: 400px; margin: 0; max-width: 95%;">
  		  <div id="chart" style="min-width: 400px; height: 500px; margin: 0 auto;"></div>
                </div>
		<!--div class="footer"><a href="http://twilio.com/api"><img src="/img/twilio.png"></a><a href="http://nodejitsu.com"><img src="/img/nodejitsu.png"></a><a href="http://cloudant.com"><img src="/img/cloudant.png"></a></div-->
    </div>
	<script src="/socket.io/socket.io.js"></script>
	<script src="/javascripts/jquery.js"></script>
	<script src="http://code.highcharts.com/highcharts.js"></script>
	<script src="http://code.highcharts.com/modules/exporting.js"></script>
	<script>
        var timer = {{timer}};
	String.prototype.unescapeHtml = function () {
    	var temp = document.createElement("div");
    	temp.innerHTML = this;
    	var result = temp.childNodes[0].nodeValue;
    	temp.removeChild(temp.firstChild);
    	return result;
	}

	// our websocket
	var socket = io.connect();
	
	// current state of the voting at load time, updated via websockets
	var data = "{{ voteoptions }}";
	
	var voting_string = data.unescapeHtml();

	var voting = JSON.parse(voting_string);
	// our live chart
	var chart;
        $('.countdown').html("Voting is " + ('{{state}}' == 'on' ? 'open' : 'closed <button class="btn btn-warning" href="#" onclick="return startTimer()"><i class="icon-play icon-white"></i></button>'));

	// Attach a handler to the window load event.
	$(document).ready(function() {
 Highcharts.setOptions({
            global: {
                useUTC: false
            }
        });

        var series = [];

        voting.forEach(function(vo, i) {
          // the number of votes
          series.push({
                name: (i+1) + ' ' + vo.name,
                data: (function() {
                    // generate an array of random data
                    var data = [],
                        time = (new Date()).getTime(),
                        j;
    
                    for (j = -19; j <= 0; j++) {
                        data.push({
                            x: time + j * 1000,
                            y: 0
                        });
                    }
                    return data;
                })()
          });
        });	
    
        $('#chart').highcharts({
            chart: {
                type: 'spline',
                backgroundColor: 'rgba(255, 255, 255, 0.1)',
                animation: Highcharts.svg, // don't animate in old IE
                marginRight: 10,
                /*
                events: {
                    load: function() {
                        
                        // set up the updating of the chart each second
                        for(var i = 0; i < this.series.length; i++) {
                          var s = this.series[i];
                          setInterval(function(s) {
                            var x = (new Date()).getTime(), // current time
                                y = Math.random();
                            .addPoint([x, y], true, true);
                          }, 1500);
                        }
                    }
                }
                */
            },
            plotOptions: {
              spline: {
                  lineWidth: 12,
                  marker: {
                    enabled: false
                  },
              },
            },
            title: {
                text: '{{ name }}'
            },
            xAxis: {
                type: 'datetime',
		dateTimeLabelFormats: '%s',
                tickPixelInterval: 150
            },
            yAxis: {
                min: 0,
                minRange: 0,
		allowDecimals: false,
                title: {
                    text: 'Value'
                },
                plotLines: [{
                    value: 0,
                    width: 1,
                    color: '#808080'
                }]
            },
            tooltip: {
                formatter: function() {
                        return '<b>'+ this.series.name +'</b><br/>'+
                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) +'<br/>'+
                        Highcharts.numberFormat(this.y, 2);
                }
            },
            legend: {
                enabled: true, 
                title: 'Legend',
                align: 'left',
                verticalAlign: 'top',
                floating: false,
                layout: 'vertical',
                useHTML: true,
                borderWidth: 0,
                labelFormatter: function() {
                  var labelRe = /^(\d+) (.*)$/;
                  var matches = labelRe.exec(this.name);
                  return '<div style="padding-bottom: 10px"><span id="choice' + matches[1] + '" style="width: 45px; text-align: center; display: inline-block; font-size: 32pt; vertical-align: top; margin-right: 10px; color: white; background-color: ' + this.color + '">' + matches[1] + '</span><div style="display: inline-block; width: 200px; overflow: hidden; height: auto; white-space: normal; text-overflow: ellipsis; font-size: 11pt">' + matches[2] + '</div></div>';
                  //return '<span style="width: 100px; overflow: hidden; text-overflow: ellipsis;">' + this.name + '</span>';
                }

            },
            exporting: {
                enabled: false
            },
            series: series
        });

        var closedMessage = 'Voting is closed <button class="btn btn-warning" href="#" onclick="return startTimer()"><i class="icon-play icon-white"></i></button>';
        var chart = $('#chart').highcharts();
                socket.on('timer', function(data) {
                   console.log('Timer update', data);
                   if (data == 0) {
                      $('.countdown').html(closedMessage);


                      var maxValue = 0;
                      for(var i = 0, il = chart.series.length; i < il; i++) {
                        var data = chart.series[i].data;
                        var final = data[data.length - 1];
                        if (final.y > maxValue) {
                          maxValue = final.y;
                        }
                      }
                      console.log(maxValue);


                      for(var i = 0, il = chart.series.length; i < il; i++) {
                        var data = chart.series[i].data;
                        var final = data[data.length - 1];
                        $('#choice' + (i + 1)).removeClass('tossing');
                        if (final.y == maxValue) {
                          $('#choice' + (i + 1)).addClass('tossing');
                        }
                      }


                      return;
                   }
                   $('.countdown').html("Voting ends in " + data + " seconds");
                });
                socket.on('stateUpdate', function(data) {
                  if(data.state == 'off') {
                    $('.countdown').html(closedMessage);
                  }
                });

	        socket.on('vote', function(data) {
			console.log('Incoming vote!', data);
			vote = parseInt(data);
			index = vote - 1;

                        var data = chart.series[index].data;
                        chart.series[index].addPoint([(new Date()).getTime(), data[data.length - 1].y + (1)], true, true);
		});
		socket.on('connect', function() {
			console.log("Connected, lets sign-up for updates about votes for this event");
			socket.emit('event', 'event:{{ shortname }}');
		});
	});

	</script>


</body>
</html>
